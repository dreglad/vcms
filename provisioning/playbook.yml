---
- hosts: default

  vars:
    - hostname: lajornadavideos-dev

    - vcms_apps:
      - lajornadavideos
      - ciencias
      - wikileaks
      - letraese
      - ojarasca
      - semanal

    - storage_dirs:
      - name: media
        path: /mnt/media
        backend: FileSystemBackend
      - name: originales
        path: /mnt/originales
        backend: FileSystemBackend
      - name: temporal
        path: /mnt/temporal
        backend: FileSystemBackend

  tasks:
    - name: hostname set
      hostname: name={{ hostname }}

    - name: APT packages updated at latest version
      apt: update_cache=yes upgrade=dist

    #- name: PPA repository for FFmpeg and codec libraries added
    #  apt_repository: repo='ppa:mc3man/xenial-media' update_cache=yes

    - name: Set MySQL root password in case of installing
      debconf: name='mysql-server' question='mysql-server/root_password' value='pass' vtype='password'

    - name: Confirm MySQL root password in case of installing
      debconf: name='mysql-server' question='mysql-server/root_password_again' value='pass' vtype='password'

    - name: Required APT packages installed
      apt: pkg={{ item }}
      with_items:
        #- fdkaac-encoder
        - fdkaac
        - ffmpeg
        - git
        - imagemagick
        - libjpeg-dev
        - libmysqlclient-dev
        - libyaml-dev
        - mysql-server
        - python-dev
        - python-memcache
        - python-mysqldb
        - python-virtualenv
        - python-pip
        - python3-pip
        - redis-server
        - solr-jetty
        - uwsgi
        - uwsgi-plugin-python
        - x264

    - name: APT Key present for official NGINX APT packages
      apt_key: url=http://nginx.org/keys/nginx_signing.key state=present
      tags: ['nginx', 'install']

    - name: NGINX deb URL present in sources.list
      lineinfile: dest=/etc/apt/sources.list line="deb http://nginx.org/packages/mainline/ubuntu/ xenial nginx"
      register: nginx_deburl
      tags: ['nginx', 'install']

    - name: NGINX deb-src URL present in sources.list
      lineinfile: dest=/etc/apt/sources.list line="deb-src http://nginx.org/packages/mainline/ubuntu/ xenial nginx"
      register: nginx_debsrcurl
      tags: ['nginx', 'install']

    - name: Update apt cache after adding NGINX in apt sources
      apt: update_cache=yes
      when: nginx_deburl.changed or nginx_debsrcurl.changed
      tags: ['nginx', 'install']

    - name: NGINX installed
      apt: pkg=nginx state=latest
      tags: ['nginx', 'install']

    - name: vcms log directory present
      file: path=/var/log/vcms state=directory owner=www-data mode=0755 follow=True

    - name: Storages directories present
      file: path={{ item[0].path }}/{{ item[1] }} state=directory owner=www-data mode=0755 follow=True
      tags: ['storage']
      with_nested:
        - "{{ storage_dirs }}"
        - "{{ vcms_apps }}"

    - name: Copy web server configuration file
      template: src=etc/nginx.conf.j2 dest=/etc/nginx/nginx.conf
      tags: ['nginx']
      notify:
        - restart nginx

    # App server
    - name: latest you-get installed
      command: pip3 install --upgrade you-get creates="/usr/local/bin/you-get"
      tags: ['python', 'install']

    - name: vcms python requirements installed
      pip: requirements=/vagrant/vcms/vcms/requirements.txt state=latest

    - name: databases created
      mysql_db: name={{ item }} login_user=root login_password=pass state=present
      register: database
      tags: ['python', 'database']
      with_items: "{{ vcms_apps }}"

    - name: databases migrated
      django_manage: command=migrate app_path=/vagrant/vcms settings=vcms.settings_{{ item }}
      tags: ['python', 'database', 'django']
      with_items: "{{ vcms_apps }}"

    - name: Iniial users created
      django_manage: command="createsuperuser --noinput --username=admin --email=admin@example.com" app_path=/vagrant/vcms settings=vcms.settings_{{ item }}
      tags: ['database', 'django']
      when: database.changed
      with_items: "{{ vcms_apps }}"

    # - name: vcms initial fixtures loaded if database changed
    #   django_manage: command=loaddata app_path=/vagrant/video_site fixtures='' settings=vcms.settings_{{ item }}
    #   when: database.changed
    #   with_items: {{ vcms_apps }}

    - name: vcms static files collected
      django_manage: command=collectstatic app_path=/vagrant/vcms settings=vcms.settings_{{ item }}
      with_items: "{{ vcms_apps }}"

    - name: vcm uWSGI configuration copied
      template: src=etc/uwsgi-vcms.ini.j2 dest=/etc/uwsgi/apps-enabled/vcms_{{ item }}.ini
      with_items: "{{ vcms_apps }}"
      tags: ['uwsgi', 'backend']
      notify:
        - restart uwsgi

    - name: vcm nginx configuration copied
      template: src=etc/nginx-vcms.conf.j2 dest=/etc/nginx/conf.d/vcms_{{ item }}.conf
      with_items: "{{ vcms_apps }}"
      tags: ['nginx']
      notify:
        - restart nginx

    # La Jornada Videos

    - name: Install lajornadavideos python requirements
      pip: requirements=/vagrant/vcms/lajornadavideos/requirements.txt state=latest
      tags: ['python', 'install', 'frontend']

    - name: Collect lajornadavideos static files
      django_manage: command=collectstatic app_path=/vagrant/vcms settings=lajornadavideos.settings
      tags: ['python', 'install', 'frontend', 'collectstatic']

    - name: Copy uWSGI lajornadavideos applicaiton configuration file
      copy: src=etc/uwsgi-lajornadavideos.ini dest=/etc/uwsgi/apps-enabled/lajornadavideos.ini
      tags: ['uwsgi', 'install', 'frontend']
      notify:
        - restart uwsgi

    - name: lajornadavideos nginx config updated
      template: src=etc/nginx-lajornadavideos.conf.j2 dest=/etc/nginx/conf.d/lajornadavideos.conf
      tags: ['nginx', 'frontend']
      notify:
        - restart nginx

    # System 

    # - name: Add supervisor upstart script
    #   copy: src=etc/upstart-supervisor.conf dest=/etc/init/supervisor.conf
    #   notify:
    #     - reload upstart configuration

    - name: Ensure uWSGI is running
      service: name=uwsgi state=started

    - name: Ensure NGINX is running
      service: name=nginx state=started

    # - name: Ensure supervisor is running
    #   service: name=supervisor state=started


  handlers:
    - name: restart nginx
      service: name=nginx state=restarted

    - name: restart uwsgi
      service: name=uwsgi state=restarted

    - name: reload upstart configuration
      command: initctl reload-configuration
