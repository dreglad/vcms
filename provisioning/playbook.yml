---
- hosts: default
  tasks:
    - name: Update all packages to latest version
      apt: update_cache=yes upgrade=dist

    - name: Add PPA repository for FFmpeg and codec libraries
      apt_repository: repo='ppa:mc3man/trusty-media' update_cache=yes

    - name: Set MySQL root password in case of installing
      debconf: name='mysql-server' question='mysql-server/root_password' value='pass' vtype='password'

    - name: Confirm MySQL root password in case of installing
      debconf: name='mysql-server' question='mysql-server/root_password_again' value='pass' vtype='password'

    - name: Install required APT packages
      apt: pkg={{ item }}
      with_items:
        - python-virtualenv
        - redis-server
        - libjpeg-dev
        - python-dev
        - libyaml-dev
        - imagemagick
        - mysql-server
        - libmysqlclient-dev
        - ffmpeg
        - x264
        - fdkaac-encoder
        - python-mysqldb
        - uwsgi
        - uwsgi-plugin-python

    - name: NGINX | Adding NGINX signing key
      apt_key: url=http://nginx.org/keys/nginx_signing.key state=present

    - name: NGINX | Adding sources.list deb url for NGINX
      lineinfile: dest=/etc/apt/sources.list line="deb http://nginx.org/packages/mainline/ubuntu/ trusty nginx"
      register: nginx_deburl

    - name: NGINX | Adding sources.list deb-src url for NGINX
      lineinfile: dest=/etc/apt/sources.list line="deb-src http://nginx.org/packages/mainline/ubuntu/ trusty nginx"
      register: nginx_debsrcurl

    - name: NGINX | Updating apt cache
      apt: update_cache=yes
      when: nginx_deburl.changed or nginx_debsrcurl.changed

    - name: NGINX | Installing NGINX
      apt: pkg=nginx state=latest

    - name: Create storage directories
      file: path={{ item }} state=directory mode=0777 follow=True
      with_items:
        - /storage
        - /storage/static
        - /storage/clips
        - /storage/images
        - /storage/temp
        - /storage/temp/status
        - /storage/hls
        - /var/log/video

    - name: Create virtualenv
      command: virtualenv /vagrant/src -p python2.7 --no-site-packages creates="/vagrant/src/bin"

    - name: Install python requirements
      pip: requirements=/vagrant/src/requirements.txt virtualenv=/vagrant/src

    - name: Create database
      mysql_db: name=video login_user=root login_password=pass state=present
      register: database

    - name: Migrate database
      django_manage: command=migrate virtualenv=/vagrant/src app_path=/vagrant/src

    - name: Load fixtures data
      django_manage: command=loaddata app_path=/vagrant/src virtualenv=/vagrant/src fixtures='users tipo_clips tipo_programas categorias paises programas corresponsales servicios'
      when: database.changed

    - name: Collect static files
      django_manage: command=collectstatic app_path=/vagrant/src virtualenv=/vagrant/src

    - name: Add supervisor upstart script
      copy: src=etc/upstart-supervisor.conf dest=/etc/init/supervisor.conf
      notify:
        - reload upstart configuration

    - name: Copy uWSGI applicaiton configuration file
      copy: src=etc/uwsgi-video.ini dest=/etc/uwsgi/apps-enabled/video.ini
      notify:
        - restart uwsgi

    - name: Copy web server main configuration file
      copy: src=etc/nginx.conf dest=/etc/nginx/nginx.conf
      notify:
        - restart nginx

    - name: Copy web server site configuration file
      copy: src=etc/nginx-site.conf dest=/etc/nginx/conf.d/default.conf
      notify:
        - restart nginx

    - name: Ensure uWSGI is running
      service: name=uwsgi state=started

    - name: Ensure NGINX is running
      service: name=nginx state=started

    - name: Ensure supervisor is running
      service: name=supervisor state=started

  handlers:
    - name: restart nginx
      service: name=nginx state=restarted

    - name: restart uwsgi
      service: name=uwsgi state=restarted

    - name: reload upstart configuration
      command: initctl reload-configuration
